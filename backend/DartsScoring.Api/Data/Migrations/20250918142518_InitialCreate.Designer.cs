// <auto-generated />
using System;
using DartsScoring.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DartsScoring.Api.Data.Migrations
{
    [DbContext(typeof(DartsContext))]
    [Migration("20250918142518_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.CricketState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BullMarks")
                        .HasColumnType("int");

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<int>("N15")
                        .HasColumnType("int");

                    b.Property<int>("N16")
                        .HasColumnType("int");

                    b.Property<int>("N17")
                        .HasColumnType("int");

                    b.Property<int>("N18")
                        .HasColumnType("int");

                    b.Property<int>("N19")
                        .HasColumnType("int");

                    b.Property<int>("N20")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("LegId", "PlayerId")
                        .IsUnique();

                    b.ToTable("CricketStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BullMarks = 0,
                            LegId = 2,
                            N15 = 0,
                            N16 = 0,
                            N17 = 0,
                            N18 = 0,
                            N19 = 0,
                            N20 = 0,
                            PlayerId = 1,
                            Points = 0
                        },
                        new
                        {
                            Id = 2,
                            BullMarks = 0,
                            LegId = 2,
                            N15 = 0,
                            N16 = 0,
                            N17 = 0,
                            N18 = 0,
                            N19 = 0,
                            N20 = 0,
                            PlayerId = 2,
                            Points = 0
                        });
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Leg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LegNumber")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("StartingPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerPlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("StartingPlayerId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("Legs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LegNumber = 1,
                            MatchId = 1,
                            StartingPlayerId = 1
                        },
                        new
                        {
                            Id = 2,
                            LegNumber = 1,
                            MatchId = 2,
                            StartingPlayerId = 2
                        });
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("DoubleOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoubleOut = true,
                            Mode = "X01",
                            StartedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Status = "InProgress",
                            TargetScore = 501
                        },
                        new
                        {
                            Id = 2,
                            DoubleOut = false,
                            Mode = "Cricket",
                            StartedAt = new DateTime(2024, 1, 1, 12, 30, 0, 0, DateTimeKind.Utc),
                            Status = "InProgress",
                            TargetScore = 0
                        });
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.MatchPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("MatchId", "PlayerId")
                        .IsUnique();

                    b.ToTable("MatchPlayers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchId = 1,
                            Order = 0,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 2,
                            MatchId = 1,
                            Order = 1,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 3,
                            MatchId = 2,
                            Order = 0,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 4,
                            MatchId = 2,
                            Order = 1,
                            PlayerId = 2
                        });
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Alice"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Bob"
                        });
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Throw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Multiplier")
                        .HasColumnType("int");

                    b.Property<int>("ScoreValue")
                        .HasColumnType("int");

                    b.Property<int>("Segment")
                        .HasColumnType("int");

                    b.Property<int>("TurnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TurnId");

                    b.ToTable("Throws");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TotalScored")
                        .HasColumnType("int");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<bool>("WasBust")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.CricketState", b =>
                {
                    b.HasOne("DartsScoring.Api.Domain.Entities.Leg", "Leg")
                        .WithMany("CricketStates")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsScoring.Api.Domain.Entities.Player", "Player")
                        .WithMany("CricketStates")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Leg", b =>
                {
                    b.HasOne("DartsScoring.Api.Domain.Entities.Match", "Match")
                        .WithMany("Legs")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsScoring.Api.Domain.Entities.Player", "StartingPlayer")
                        .WithMany("StartingLegs")
                        .HasForeignKey("StartingPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DartsScoring.Api.Domain.Entities.Player", "WinnerPlayer")
                        .WithMany("WonLegs")
                        .HasForeignKey("WinnerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Match");

                    b.Navigation("StartingPlayer");

                    b.Navigation("WinnerPlayer");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.MatchPlayer", b =>
                {
                    b.HasOne("DartsScoring.Api.Domain.Entities.Match", "Match")
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsScoring.Api.Domain.Entities.Player", "Player")
                        .WithMany("Matches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Throw", b =>
                {
                    b.HasOne("DartsScoring.Api.Domain.Entities.Turn", "Turn")
                        .WithMany("Throws")
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Turn", b =>
                {
                    b.HasOne("DartsScoring.Api.Domain.Entities.Leg", "Leg")
                        .WithMany("Turns")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DartsScoring.Api.Domain.Entities.Player", "Player")
                        .WithMany("Turns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Leg", b =>
                {
                    b.Navigation("CricketStates");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Match", b =>
                {
                    b.Navigation("Legs");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Player", b =>
                {
                    b.Navigation("CricketStates");

                    b.Navigation("Matches");

                    b.Navigation("StartingLegs");

                    b.Navigation("Turns");

                    b.Navigation("WonLegs");
                });

            modelBuilder.Entity("DartsScoring.Api.Domain.Entities.Turn", b =>
                {
                    b.Navigation("Throws");
                });
#pragma warning restore 612, 618
        }
    }
}
